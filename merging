
#include<iostream>
#include<stdio.h>
#include<stdlib.h>
using namespace std;
struct array
{
    int A[20];
    int size;
    int length;
};
void display(struct array arr)
{
    for(int i=0;i<arr.length;i++)
        cout<<arr.A[i]<<" ";
        cout<<endl;
}
void add(struct array *arr,int x)
{
    arr->A[arr->length++]=x;
}
void insert(struct array *arr,int index,int x)
{
    if(index>=0&&index<=arr->length)
    {
        for(int i=arr->length;i>index;i--)
            arr->A[i]=arr->A[i-1];
        arr->A[index]=x;
        arr->length++;
    }
}
int delete1(struct array *arr,int index)
{
    int x;
    if(index>=0&&index<arr->length)
    {
     x=arr->A[index];
     for(int i=index;i<(arr->length)-1;i++)
            arr->A[i]=arr->A[i+1];
     arr->length--;
     return x;
    }
    return -1;
}
int linearsearch(struct array arr ,int key)
{
    for(int i=0;i<arr.length;i++)
    {
        if(key==arr.A[i])
        {
           return i;
        }
    }
    return -1;
}
void swap1(int *x, int *y)
{
    int temp;
    temp=*x;
    *x=*y;
    *y=temp;
}
int linsearch(struct array *arr,int key)
{
    for(int i=0;i<arr->length;i++)
    {
        if(key==arr->A[i])
        {
            swap1(&arr->A[i],&arr->A[0]);
            return 0;
        }

    }
    return -1;
}
int binarysearch(struct array arr,int key)
{
    int l,h,mid;
    l=0;h=arr.length-1;
    while(l<=h)
    {
        mid=(l+h)/2;
        if(key==arr.A[mid])
            return mid;
        else if(key<arr.A[mid])
        {
            h=mid-1;
        }
        else
        {
            l=mid+1;
        }
    }
    return -1;
}
int rbinarysearch(int a[],int l,int h,int key)
{int mid;
    if(l<=h)
    {
       mid=(l+h)/2;
     if(key==a[mid])
        return mid;
     else if(key<a[mid])
     {
         return rbinarysearch(a,l,mid-1,key);
     }
     else
        return rbinarysearch(a,mid+1,h,key);
    }
    return -1;
}

void insertsort(struct array *arr,int x)
{
    int i;
    i=arr->length-1;
    if(arr->length==arr->size)
        return;
    else
      while(arr->A[i]>x)
      {
          arr->A[i+1]=arr->A[i];
          i--;
      }
      arr->A[i+1]=x;
      arr->length++;
      return;
}
int issorted(struct array arr)
{
    int i;
    for(i=0;i<arr.length-1;i++)
    {
        if(arr.A[i]>arr.A[i+1])
            return 0;
    }
    return 1;
}
int get(struct array arr,int index)
{
    if(index>=0&&index<=arr.length)
    {
        return arr.A[index];
    }
    return -1;
}
void set(struct array *arr,int index,int x)
{
    if(index>=0&&index<arr->length)
        arr->A[index]=x;
    return;
}
int maximum(struct array arr)
{
    int i,max=arr.A[0];

    for(i=1;i<arr.length;i++)
    {
        if(arr.A[i]>max)
        {
            max=arr.A[i];
        }
    }
    return max;
}
int minimum(struct array arr)
{
    int i,min=arr.A[0];

    for(i=1;i<arr.length;i++)
    {
        if(arr.A[i]<min)
        {
            min=arr.A[i];
        }
    }
    return min;
}
int sum(struct array arr)
{
    int s=0,i;
    for(i=0;i<arr.length;i++)
    {
        s+=arr.A[i];
    }
    return s;
}
float avg(struct array arr)
{
    return (float)sum(arr)/arr.length;
}

struct array * merge(struct array *arr1,struct array * arr2)
{
    int i,j,k;
    i=j=k=0;
  struct array * arr3=(struct array*)malloc(sizeof(struct array));
  while(i<arr1->length&&j<arr2->length)
  {
      if(arr1->A[i]<arr2->A[j])
        arr3->A[k++]=arr1->A[i++];
        else
        arr3->A[k++]=arr2->A[j++];
  }
  for(;i<arr1->length;i++)
   {
     arr3->A[k++]=arr1->A[i];
   }
      for(;j<arr2->length;j++)
      {
           arr3->A[k++]=arr2->A[j];
      }
  arr3->length=arr1->length+arr2->length;
  arr3->size=10;
  return arr3;
}
struct array * union1(struct array *arr1,struct array * arr2)
{
    int i,j,k;
    i=j=k=0;
 // struct array * arr3=(struct array*)malloc(sizeof(struct array));
    struct array * arr3=new struct array;
  while(i<arr1->length&&j<arr2->length)
  {
      if(arr1->A[i]<arr2->A[j])
        arr3->A[k++]=arr1->A[i++];
        else if(arr2->A[j]<arr1->A[i])
        arr3->A[k++]=arr2->A[j++];
        else
        {
           arr3->A[k++]=arr1->A[i++];
           j++;
        }
  }
  for(;i<arr1->length;i++)
   {
     arr3->A[k++]=arr1->A[i];
   }
      for(;j<arr2->length;j++)
      {
           arr3->A[k++]=arr2->A[j];
      }
  arr3->length=k;
  arr3->size=10;
  return arr3;
}
struct array * intersection(struct array *arr1,struct array * arr2)
{
    int i,j,k;
    i=j=k=0;
 // struct array * arr3=(struct array*)malloc(sizeof(struct array));
    struct array * arr3=new struct array;
  while(i<arr1->length&&j<arr2->length)
  {
      if(arr1->A[i]<arr2->A[j])
       i++;
        else if(arr2->A[j]<arr1->A[i])
       j++;
        else
        {
           arr3->A[k++]=arr1->A[i++];
           j++;
        }
  }

  arr3->length=k;
  arr3->size=10;
  return arr3;
}
struct array * difference(struct array *arr1,struct array * arr2)
{
    int i,j,k;
    i=j=k=0;
 // struct array * arr3=(struct array*)malloc(sizeof(struct array));
    struct array * arr3=new struct array;
  while(i<arr1->length&&j<arr2->length)
  {
      if(arr1->A[i]<arr2->A[j])
        arr3->A[k++]=arr1->A[i++];
        else if(arr2->A[j]<arr1->A[i])
      j++;
        else
        {
          i++;
           j++;
        }
  }
  for(;i<arr1->length;i++)
   {
     arr3->A[k++]=arr1->A[i];
   }
  arr3->length=k;
  arr3->size=10;
  return arr3;
}
void reverse1(struct array *arr)
{
    int i,j;
   int*b;
   b=new int[arr->length];
    for( i=0,j=arr->length-1;i<arr->length;i++,j--)
    {
        b[i]=arr->A[j];
    }
    for(i=0;i<arr->length;i++)
    {
        arr->A[i]=b[i];
    }
}
void reverse2(struct array *arr)
{
    int i,j;
    i=0;j=arr->length-1;
    while(i<j)
    {
        swap1(&arr->A[i],&arr->A[j]);
        i++;
        j--;
    }
    return;
}
void rearrange(struct array *arr)
{
    int i,j;
    i=0;j=arr->length-1;
    while(i<j)
    {
        while(arr->A[i]<0)
        {
        i++;
        }
        while(arr->A[j]>=0)
        {
            j--;
        }
        if(i<j)
            swap1(&arr->A[i],&arr->A[j]);
    }
    return;
}
int main()
{
    struct array arr1={{1,-2,-3,4,-5},10,5};
    struct array arr2={{1,9,15,17,49},10,5};
     struct array *arr3;
   // display(arr);
    //add(&arr,30);
   // insert(&arr,3,18);
  // cout<<delete1(&arr,4);
 //  cout<<endl;
    //display(arr);
   //cout<<binarysearch(arr,6);
  // cout<<linsearch(&arr,7);
  //cout<<binarysearch(arr,2);
 // cout<<rbinarysearch(arr.A,0,arr.length-1,1);
 //
 //display(arr);
//insertsort(&arr,46);
//cout<<issorted(arr);
//cout<<get(arr,6);
//set(&arr,4,18);
//cout<<maximum(arr);
//cout<<minimum(arr);
//cout<<avg(arr);
//display(arr);
//rearrange(&arr);
//arr3=union(&arr1,&arr2);
//arr3=difference(&arr1,&arr2);
//reverse2(&arr1);
rearrange(&arr1);
display(arr1);
    return 0;
}
